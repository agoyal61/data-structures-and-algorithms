Hello Connections I am sharing Top 40 questions on DSA asked in interviews. I hope it is helpful for you guys :) 💯💯

𝐀𝐫𝐫𝐚𝐲𝐬 𝐚𝐧𝐝 𝐒𝐭𝐫𝐢𝐧𝐠𝐬
1. Find the missing number in an array of integers.
2. Implement an algorithm to rotate an array.
3. Check if a string is a palindrome.
4. Find the first non-repeating character in a string.
5. Implement an algorithm to reverse a linked list.
6. Merge two sorted arrays.
7. Implement a stack using arrays/linked list.
8. Write a program to remove duplicates from a sorted array.

𝐋𝐢𝐧𝐤𝐞𝐝 𝐋𝐢𝐬𝐭𝐬:
1. Detect a cycle in a linked list.
2. Find the intersection point of two linked lists.
3. Reverse a linked list in groups of k.
4. Implement a function to add two numbers represented by linked lists.
5. Clone a linked list with next and random pointer.

𝐓𝐫𝐞𝐞𝐬 𝐚𝐧𝐝 𝐁𝐢𝐧𝐚𝐫𝐲 𝐒𝐞𝐚𝐫𝐜𝐡 𝐓𝐫𝐞𝐞𝐬 (𝐁𝐒𝐓):
1. Find the height of a binary tree.
2. Check if a binary tree is balanced.
3. Find the lowest common ancestor in a binary tree.
4. Serialize and deserialize a binary tree.
5. Implement an algorithm for in-order traversal without recursion.
6. Convert a BST to a sorted doubly linked list.

𝐒𝐞𝐚𝐫𝐜𝐡𝐢𝐧𝐠 𝐚𝐧𝐝 𝐒𝐨𝐫𝐭𝐢𝐧𝐠:
1. Implement binary search.
2. Find the kth smallest/largest element in an array.
3. Implement quicksort.
4. Count the number of inversions in an array.
5. Search in a rotated sorted array.

𝐃𝐲𝐧𝐚𝐦𝐢𝐜 𝐏𝐫𝐨𝐠𝐫𝐚𝐦𝐦𝐢𝐧𝐠:
1. Find the longest common subsequence.
2. Calculate the nth Fibonacci number using dynamic programming.
3. Coin change problem.
4. Longest increasing subsequence.
5. Knapsack problem.

𝐆𝐫𝐚𝐩𝐡𝐬 𝐚𝐧𝐝 𝐃𝐅𝐒/𝐁𝐅𝐒:
1. Implement depth-first search (DFS) and breadth-first search (BFS).
2. Check if a graph is cyclic.
3. Shortest path in a weighted graph (Dijkstra's or Bellman-Ford).
4. Topological sort of a directed acyclic graph (DAG).
5. Count the number of connected components in an undirected graph.

𝐌𝐢𝐬𝐜𝐞𝐥𝐥𝐚𝐧𝐞𝐨𝐮𝐬:
1. Implement a LRU (Least Recently Used) cache.
2. Find the median of two sorted arrays.
3. Implement a stack that supports push, pop, top, and retrieving the minimum element in constant time.
4. Design a data structure that supports insert, delete, getRandom() operations in constant time.
5. Check if a Sudoku is valid.