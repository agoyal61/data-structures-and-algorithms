int a = Integer.parseInt("1234"); 

int[] arr = {5, 3, 8, 4, 2};
Arrays.sort(arr); // sort the array
System.out.println(Arrays.toString(arr)); // print the array
 // Printing sorted array
 for (int num : arr) {
    System.out.print(num + " ");
}

 // Binary search
 int index = Arrays.binarySearch(arr, 3); // search for 3 in the array arr // if found, return the index, otherwise return -1

 String s = "abracadabra";
 HashMap<Character, Integer> frequency = new HashMap<>();
 for (char c : s.toCharArray()) {
     frequency.put(c, frequency.getOrDefault(c, 0) + 1);
 }
 // Printing frequency of each character
 for (char c : frequency.keySet()) {
     System.out.println(c + ": " + frequency.get(c));
 }

int[] frequency = new int[26]; // Assuming only lowercase letters
Arrays.fill(frequency,-1); // fill the array with -1
frequency.length // length of the array
String s = "abracadabra";
s.length(); // length of the string
s.charAt(i); // get the character at index i
Math.min(1,2)// return the minimum of two numbers
Math.max(1,2)// return the maximum of two numbers
Integer.MAX_VALUE; // maximum value of an integer
Integer.MIN_VALUE; // minimum value of an integer

// Data Types in Java
Character
Integer
String
Float
Double
Long
Short
Boolean
StringBuilder
StringBuffer
Arrays
Collections

// data types
int
long
float
char
double
boolean
String

int[] arr = new int[5]; // array of integers
char[][] grid = new char[3][3]; // 3x3 grid
int[][] grid = new int[3][3]; // 3x3 grid
int[][] grid = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; // 3x3 grid
boolean vis[][]=new boolean[m][n]; // m x n grid
int row[]={-1, 0, 0, 1}; // for 4 directions

StringBuffer str1=new StringBuffer(); // mutable string // builder is used more in competitive programming
str1.append("Hello"); // append to the string
str1.toString().equals(str2.toString()); // compare two strings
str1.reverse(); // reverse the string

String str = "Hello, World!";
String subStr = str.substring(7, 12); // from index 7 to 11 (12-1)
str.split(","); // split the string by comma

// sort string
char[] charArray = str.toCharArray();  // Convert string to a character array
Arrays.sort(charArray);  // Sort the character array // sort in ascending order // it does not return anything
return new String(charArray);  // Convert the sorted character array back to a string

// another way to sort string
List<Character> charList = new ArrayList<>();
for (char c : str.toCharArray()) {
    charList.add(c);
}
Collections.sort(charList); // sort the list
StringBuilder sortedStr = new StringBuilder(charList.size());
for (char c : charList) {
    sortedStr.append(c);
}
return sortedStr.toString();

String s=Integer.toString(123); // convert integer to string
String s=String.valueOf(12) // convert any type to string eg- 1, 'a', 1.2, 1.2f, 1.2d

StringBuilder result = new StringBuilder(); // mutable string // faster than StringBuffer // more used in competitive programming
result.toString(); // convert StringBuilder to String
result.append("."); // append to the string // append any type of data such as string, long, int, char, etc.
result.insert(1 "x"); // insert at a specific index
result.length(); // length of the string

int numerator=1;
long num=Math.abs((long)numerator);

Integer.MIN_VALUE // minimum value of an integer
Integer.MAX_VALUE // maximum value of an integer

char[][] board = new char[n][n];
boolean[] leftRow = new boolean[n];
boolean[] lowerDiagonal = new boolean[2 * n - 1];
boolean[] upperDiagonal = new boolean[2 * n - 1];
lowerDiagonal[row + col] // lower diagonal
upperDiagonal[n - 1 + col - row] // upper diagonal

char[] charArray = str.toCharArray(); // convert string to char array
Arrays.sort(charArray); // sort the char array
Arrays.sort(charArray, Collections.reverseOrder()); // sort in descending order
String sortedStr = new String(charArray); // convert char array to string

Queue<int[]> q=new LinkedList<>();
q.offer(new int[]{i,j}); // add to the queue
int[] cell=q.poll(); // remove from the queue


int[][] v = {{2, 1}, {1, 4}, {1, 3}, {2, 2}};

// Sort the 2D array using a lambda expression
Arrays.sort(v, (a, b) -> {
    if (a[0] != b[0]) {
        return Integer.compare(a[0], b[0]);
    } else {
        return Integer.compare(a[1], b[1]);
    }
});

// Sort the 2D array using a custom comparator
Arrays.sort(v, new Comparator<int[]>() {
    @Override
    public int compare(int[] a, int[] b) {
        if (a[0] != b[0]) {
            return Integer.compare(a[0], b[0]);
        } else {
            return Integer.compare(a[1], b[1]);
        }
    }
});


// List to 2D array
List<List<Integer>> list=new ArrayList<>();
return (int[][]) list.toArray(); // convert list to 2D int array // it does not work

list.toArray(new int[list.size()][]) // convert list to 2D int array // did not worked

// Array to List conversion
Arrays.asList(1, 2, 3); // convert array to list

StringBuilder str=new StringBuilder();
str.length()>0 && str.charAt(0)=='0'; // check if the string is empty or starts with 0
str.deleteCharAt(0); // delete the first character
str.toString(); // convert StringBuilder to String

Integer.valueOf("123"); // convert string to integer
Integer.parseInt("123"); // convert string to integer
String.valueOf(123); // convert integer to string

public static void reverseArray(Integer[] array) {
    List<Integer> list = Arrays.asList(array);
    Collections.reverse(list);
    array = list.toArray(array);  // If you need the reversed array back
}

Arrays.sort(array, 2, array.length); // sort the array from index 2 to the end

new int[]{3,2,1}; // create an array

Set<List<Integer>> as= new HashSet<>();
Set<List<Integer>> s= new HashSet<>();
as.addAll(s); // add all elements of s to as

Arrays.fill(dp,0); // dp array fill with 0
Arrays.fill(dp,Integer.MAX_VALUE); // dp array fill with Integer.MAX_VALUE

str1.equals(str2); // compare two strings // return true if equal, otherwise false
str1.compareTo(str2); // compare two strings // return 0 if equal, -1 if str1 < str2, 1 if str1 > str2

int[][] intervals
Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0])); // sort the 2D array by the first element of each row
// Min heap
PriorityQueue<Integer> allocator =
    new PriorityQueue<Integer>(
        intervals.length,
        new Comparator<Integer>() {
            public int compare(Integer a, Integer b) {
            return a - b;
            }
        });

// Sort the intervals by start time
Arrays.sort(
    intervals,
    new Comparator<int[]>() {
        public int compare(final int[] a, final int[] b) {
        return a[0] - b[0];
        }
    });

Integer[] start = new Integer[intervals.length];

// Sort the intervals by start time
Arrays.sort(
    start,
    new Comparator<Integer>() {
        public int compare(Integer a, Integer b) {
        return a - b;
        }
    });

Arrays.stream(dp).max().getAsInt(); // get the maximum value in the dp array // dp is an integer array i.e. int[] dp
Arrays.stream(dp).min().getAsInt(); // get the minimum value in the dp array

Set<Integer> st = new HashSet<>();
ArrayList<Integer> al=new ArrayList(st); // convert set to list

Math.random(); // generate a random number between 0 and 1 // exclusive of 1 // return double

Character.isDigit('1'); // check if the character is a digit


int initialCapacity = 5;
ArrayList<Integer> val=new ArrayList<>(initialCapacity); // create an array list with initial capacity // still size is 0 // add elements to the list for increasing the size