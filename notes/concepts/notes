(1 << n) i.e.  2^n # left shift operator # 2 less than symbol

for mask in range(1 << n):
    for i in range(n):
        mask & (1 << i)
        mask | (1 << i)


# Dist(n1, n2) = Dist(root, n1) + Dist(root, n2) - 2*Dist(root, lca) 
        
# non ascii delimeter
/:    #  Ï€

# 2^n subset generation of a set nums
vector<int> nums;
int size = nums.size();
for (int mask = 0; mask < (1 << size); ++mask) {
    for (int i = 0; i < size; ++i) {
        if (mask & (1 << i)) {
           // i included in mask
        }
    }
}

# dp approaches

function dp(dp_state, memo_dict) {
    // check if we have seen this dp_state
    if dp_state in memo_dict
        return memo_dict[dp_state]

    // base case (a case that we know the answer for already) such as dp_state is empty
    if dp_state is the base cases
        return things like 0 or null
    
    calculate dp(dp_state) from dp(other_state)
    
    save dp_state and the result into memo_dict
}
function answerToProblem(input) {
    return dp(start_state, empty_memo_dict)
}