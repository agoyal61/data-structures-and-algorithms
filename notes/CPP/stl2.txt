int n = sizeof(arr) / sizeof(arr[0]);
sort(arr, arr + n);
sort(arr, arr + n, greater<int>());
sort(arr, arr + n, compareByAge);

// vector, set, list

// Using range-based for loop (recommended for simple traversal)
    for(const int &val : vec) {
        std::cout << val << " ";
    }

    // Using iterators
    for(auto it = vec.begin(); it != vec.end(); ++it) {
        std::cout << *it << " ";
    }

// map

    // Using range-based for loop
    for(const auto &pair : m) {
        std::cout << pair.first << ": " << pair.second << "\n";
    }

    // Using iterators
    for(auto it = m.begin(); it != m.end(); ++it) {
        std::cout << it->first << ": " << it->second << "\n";
    }

// search in container
// vector
auto it = std::find(vec.begin(), vec.end(), target);

    if (it != vec.end()) {
        std::cout << "Found " << target << " at index " << std::distance(vec.begin(), it) << "\n";
    } else {
        std::cout << target << " not found in the vector.\n";
 }

// set

    auto it = s.find(target);

    if (it != s.end()) {
        std::cout << "Found " << target << "\n";
    } else {
        std::cout << target << " not found in the set.\n";
    }

// map
  auto it = m.find(key);

    if (it != m.end()) {
        std::cout << "Found " << key << " with value " << it->second << "\n";
    }	


// set descneding order set 

// Comparator for descending order
struct DescendingOrder {
    bool operator()(const int& lhs, const int& rhs) const {
        return rhs < lhs;  // Note the reversed comparison
    }
};

std::set<int, DescendingOrder> s = {5, 3, 8, 4, 1};


// sort descending order vector
// Comparator function for descending order
bool comparator(const int& lhs, const int& rhs) {
    return rhs < lhs;  // Note the reversed comparison for descending order
}

std::vector<int> vec = {5, 3, 8, 4, 1};

  / Sort the vector in descending order using the custom comparator
    std::sort(vec.begin(), vec.end(), comparator);

// descending order map by keys
// Comparator struct for descending order of keys
struct Comparator {
    bool operator() (const int& lhs, const int& rhs) const {
        return rhs < lhs;  // Note the reversed comparison for descending order
    }
};

	std::map<int, std::string, Comparator> m;

// priority_queue
// default max prioriy_queue
 std::priority_queue<int> pq;

// min priorit_queue
std::priority_queue<int, std::vector<int>, std::greater<int>> minPq;

// sort array and vector in descending order 
std::sort(arr, arr + n, std::greater<int>());
std::sort(vec.begin(), vec.end(), std::greater<int>());

======== useful functions ===============
strlen(str) // for character array
str.length() // for string
str.size() // for string
str.substr(7) //gives substr

 size_t position = str.find(sub);
   if (position != std::string::npos) {
        std::cout << "Found '" << sub << "' at position " << position << std::endl;
    }

        sort(paired.begin(), paired.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            return a.first > b.first;
        });

bool compareScores(const pair<int, int>& a, const pair<int, int>& b) {
    return a.first > b.first;
}
sort(paired.begin(), paired.end(), compareScores);

========= functions used ==========
to_string(i + 1)
reverse(s.begin() + i, s.begin() + j + 1)
swap(s[left], s[right])
static_cast<int>(s.size())  // C++ casting operator