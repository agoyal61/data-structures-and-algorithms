int n = sizeof(arr) / sizeof(arr[0]);
sort(arr, arr + n);
sort(arr, arr + n, greater<int>());
sort(arr, arr + n, compareByAge);

// vector, set, list

// Using range-based for loop (recommended for simple traversal)
    for(const int &val : vec) {
        cout << val << " ";
    }

    // Using iterators
    for(auto it = vec.begin(); it != vec.end(); ++it) {
        cout << *it << " ";
    }

// map

    // Using range-based for loop
    for(const auto &pair : m) {
        cout << pair.first << ": " << pair.second << "\n";
    }

    // Using iterators
    for(auto it = m.begin(); it != m.end(); ++it) {
        cout << it->first << ": " << it->second << "\n";
    }

// search in container
// vector
auto it = find(vec.begin(), vec.end(), target);

    if (it != vec.end()) {
        cout << "Found " << target << " at index " << distance(vec.begin(), it) << "\n";
    } else {
        cout << target << " not found in the vector.\n";
 }

// set

    auto it = s.find(target);

    if (it != s.end()) {
        cout << "Found " << target << "\n";
    } else {
        cout << target << " not found in the set.\n";
    }

// map
  auto it = m.find(key);

    if (it != m.end()) {
        cout << "Found " << key << " with value " << it->second << "\n";
    }	


// set descneding order set 

// Comparator for descending order
struct DescendingOrder {
    bool operator()(const int& lhs, const int& rhs) const {
        return rhs < lhs;  // Note the reversed comparison
    }
};

set<int, DescendingOrder> s = {5, 3, 8, 4, 1};


// sort descending order vector
// Comparator function for descending order
bool comparator(const int& lhs, const int& rhs) {
    return rhs < lhs;  // Note the reversed comparison for descending order
}

vector<int> vec = {5, 3, 8, 4, 1};

  / Sort the vector in descending order using the custom comparator
    sort(vec.begin(), vec.end(), comparator);

// descending order map by keys
// Comparator struct for descending order of keys
struct Comparator {
    bool operator() (const int& lhs, const int& rhs) const {
        return rhs < lhs;  // Note the reversed comparison for descending order
    }
};

	map<int, string, Comparator> m;

// priority_queue
// default max prioriy_queue
 priority_queue<int> pq;

// min priorit_queue
priority_queue<int, vector<int>, greater<int>> minPq;

// sort array and vector in descending order 
sort(arr, arr + n, greater<int>());
sort(vec.begin(), vec.end(), greater<int>());

======== useful functions ===============
strlen(str) // for character array
str.length() // for string
str.size() // for string
str.substr(7) //gives substr

 size_t position = str.find(sub);
   if (position != string::npos) {
        cout << "Found '" << sub << "' at position " << position << endl;
    }

        sort(paired.begin(), paired.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            return a.first > b.first;
        });

bool compareScores(const pair<int, int>& a, const pair<int, int>& b) {
    return a.first > b.first;
}
sort(paired.begin(), paired.end(), compareScores);

========= functions used ==========
to_string(i + 1)
reverse(s.begin() + i, s.begin() + j + 1)
swap(s[left], s[right])
static_cast<int>(s.size())  // C++ casting operator


====== ordered set =========

set<pair<int, int>> st; // set container automatically sorts its elements according to the first element of the pair when you're storing pairs in it.

To sort based on second element we need custom comparator like below

// custom comparator
struct CompareSecond {
    bool operator() (const pair<int, int>& a, const pair<int, int>& b) {
        // Primary sort based on the second element
        if (a.second != b.second) return a.second < b.second;
        // Secondary sort based on the first element, if second elements are equal
        return a.first < b.first;
    }
};

// Create a set of pairs with the custom comparator
set<pair<int, int>, CompareSecond> st; // sort based on second element of pair in ascending order

// comparator 

bool cmp(int a, int b) {
    return a < b;
}

class Solution {
    public:
        // here static function is necessary without static it doesn't work because it is part of this pointer (class instance)
        bool static cmp(int a, int b) {
            return a < b;
        }  

        vector<int> vec;
        sort(vec.begin(), vec.end(), cmp);
}


// the multiset container, like set, is typically implemented as a balanced binary search tree (BBST).
Ordered: Elements in a multiset are automatically arranged in a specific order (usually ascending) based on their value.
Duplicates Allowed: Unlike a set, a multiset can contain multiple elements with the same value.
Dynamic Size: The size of a multiset can change dynamically; elements can be added or removed at runtime.
Element Access: Direct element access (by index) is not provided; elements are accessed through iterators.
Bidirectional Iterators: Provides bidirectional iterators that can traverse the container forwards and backwards.

multiset<int> ms;