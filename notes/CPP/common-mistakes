#include <bits/stdc++.h>

vector<pair<int,double>> cars;

sort(cars.begin(),cars.end(),greater<int>());  // wrong The greater<int>() comparator is intended for sorting integers in descending order, but it won't work correctly for sorting pairs based on their second element.

// use lambda function
sort(cars.begin(), cars.end(), [](const pair<int, double>& a, const pair<int, double>& b) {
    return a.second > b.second;
});

// use rbegin() 
  sort(cars.rbegin(), cars.rend());

// For unordered container such as unordered_set, unoredered_map we need custom hash function for pair data type
map<pair<int, int>, bool> visited;
unordered_map<pair<int, int>, bool, pair_hash> visited;
unordered_map<vector<int>, bool, vector_hash> visited;


set<pair<int, int>> visited;
unordered_set<pair<int, int>, pair_hash> visited;
unordered_set<vector<int>, vector_hash> visited_set;

// using boost library
unordered_map<pair<int, int>, bool, boost::hash<pair<int, int>>> connDict;

// it's better to declare custom hash function outside the class bcoz sometimes it gives error if we write inside the same class
// correct 
struct pair_hash {
    size_t operator() (const pair<int,int>& pair) const {
        hash<int> hasher;
        size_t hash1 = hasher(pair.first);
        size_t hash2 = hasher(pair.second);

        // other ways
        // size_t hash1 = hash<int> {}(p.first);
        // size_t hash2 = hash<int> {}(p.second);
        return hash1 ^ hash2;
    }
};

// to optimize time limit exceeded 
struct pair_hash {
    // without inline also works
    inline size_t operator()(const pair<int,int>& v) const {
        return v.first * 31 + v.second;
    }
};

// wrong bcoz auto is not allowed in struct. Also const is required in const pair<int,int>& pair
struct pair_hash {
    size_t operator() (const pair<int,int>& pair) const {
        auto hash1 = hash<int>{}(pair.first);
        auto hash2 = hash<int>{}(pair.second);
        return hash1 ^ hash2;
    }
};



// generic type use is different than non-genric type
unordered_set<pair<int, int>, pair_hash<int, int>> vis;

template<typename T1, typename T2>
struct pair_hash {
    size_t operator() (const pair<T1, T2>& pair) const {
        hash<T1> hasher1;
        hash<T2> hasher2;
        size_t hash1 = hasher1(pair.first);
        size_t hash2 = hasher2(pair.second);
        return hash1 ^ hash2;
    }
};


struct vector_hash {
    template <typename T>
    size_t operator()(const vector<T>& v) const {
        hash<T> hasher;
        size_t seed = 0;
        for (T i : v) {
            seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
        }
        return seed;
    }
};