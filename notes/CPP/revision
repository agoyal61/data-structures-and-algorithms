// C++ Revision

#include <bits/stdc++.h>

Input/Output:
ios_base::sync_with_stdio(false);: Speeds up I/O operations.
cin.tie(NULL);: Unties cin from cout for faster I/O.
Data Structures:
STL Containers: vector, set, map, unordered_set, unordered_map, stack, queue, deque, priority_queue.
Iterators & Ranges: Useful for quickly traversing containers.
Algorithms:
sort(): Sorts a collection.
binary_search(): Performs binary search on a sorted collection.
lower_bound(), upper_bound(): Returns iterators pointing to positions in a sorted collection.
next_permutation(): Generates the next lexicographically greater permutation.
gcd(): Returns the greatest common divisor of two numbers.
String Manipulation:
string::substr(), string::find(): Useful for substring operations.
stringstream: For easy string parsing and conversion between types.
Math Functions:
pow(), sqrt(): Power and square root operations.
ceil(), floor(): Ceiling and floor functions.
Utility Functions:
swap(): Swaps two values.
max(), min(): Returns maximum and minimum of given values.
distance(): Finds the distance between two iterators.
Bit Manipulation:
Bitwise operators: &, |, ^, ~, <<, >>
__builtin_popcount(): Returns the count of set bits.
Others:
numeric_limits: To get maximum and minimum values for data types.
Using typedef or using for creating shorter names for complex data types

The C++ Standard Template Library (STL) provides a range of containers that come with a set of useful member and non-member functions. Here's a list of useful functions for some of the most commonly used STL containers:
		vector:
push_back(): Adds an element to the end.
pop_back(): Removes the last element.
resize(): Resizes the container.
size(): Returns the number of elements.
empty(): Checks if the container is empty.
begin(), end(): Returns iterators.
rbegin(), rend(): Returns reverse iterators.
		list:
push_front(), push_back(): Adds an element to the beginning or end.
pop_front(), pop_back(): Removes the first or last element.
insert(): Inserts elements.
erase(): Erases elements.
sort(): Sorts the list.
merge(): Merges two sorted lists.
reverse(): Reverses the list.
		set & multiset:
insert(): Inserts an element.
erase(): Erases elements by key or iterator.
find(): Finds an element by key.
count(): Counts elements with a specific key.
lower_bound(), upper_bound(): Returns iterators to the boundaries of a key range.
		map & multimap:
insert(): Inserts a key-value pair.
erase(): Erases elements by key or iterator.
find(): Finds an element by key.
operator[]: Accesses or modifies the value associated with a key.
count(): Counts elements with a specific key.
		stack:
push(): Adds an element to the top.
pop(): Removes the top element.
top(): Accesses the top element.
empty(): Checks if the stack is empty.
		queue & priority_queue:
push(): Adds an element.
pop(): Removes the front element (or top element in priority_queue).
front(): Accesses the front element.
back(): Accesses the back element (not available in priority_queue).
empty(): Checks if the queue is empty.
		deque:
push_front(), push_back(): Adds an element to the front or back.
pop_front(), pop_back(): Removes the front or back element.
begin(), end(): Returns iterators.
size(): Returns the number of elements.
empty(): Checks if the deque is empty.
		unordered_set, unordered_map, unordered_multiset, unordered_multimap:
Similar to their ordered counterparts (set, map, etc.), but based on hash tables.â€¨

int n = sizeof(arr) / sizeof(arr[0]);
sort(arr, arr + n);
sort(arr, arr + n, greater<int>());
sort(arr, arr + n, compareByAge);

// vector, set, list

// Using range-based for loop (recommended for simple traversal)
    for(const int &val : vec) {
        std::cout << val << " ";
    }

    // Using iterators
    for(auto it = vec.begin(); it != vec.end(); ++it) {
        std::cout << *it << " ";
    }

// map

    // Using range-based for loop
    for(const auto &pair : m) {
        std::cout << pair.first << ": " << pair.second << "\n";
    }

    // Using iterators
    for(auto it = m.begin(); it != m.end(); ++it) {
        std::cout << it->first << ": " << it->second << "\n";
    }

// search in container
// vector
auto it = std::find(vec.begin(), vec.end(), target);

    if (it != vec.end()) {
        std::cout << "Found " << target << " at index " << std::distance(vec.begin(), it) << "\n";
    } else {
        std::cout << target << " not found in the vector.\n";
 }

// set

    auto it = s.find(target);

    if (it != s.end()) {
        std::cout << "Found " << target << "\n";
    } else {
        std::cout << target << " not found in the set.\n";
    }

// map
  auto it = m.find(key);

    if (it != m.end()) {
        std::cout << "Found " << key << " with value " << it->second << "\n";
    }	


// set descneding order set 

// Comparator for descending order
struct DescendingOrder {
    bool operator()(const int& lhs, const int& rhs) const {
        return rhs < lhs;  // Note the reversed comparison
    }
};

std::set<int, DescendingOrder> s = {5, 3, 8, 4, 1};


// sort descending order vector
// Comparator function for descending order
bool comparator(const int& lhs, const int& rhs) {
    return rhs < lhs;  // Note the reversed comparison for descending order
}

std::vector<int> vec = {5, 3, 8, 4, 1};

  / Sort the vector in descending order using the custom comparator
    std::sort(vec.begin(), vec.end(), comparator);

// descending order map by keys
// Comparator struct for descending order of keys
struct Comparator {
    bool operator() (const int& lhs, const int& rhs) const {
        return rhs < lhs;  // Note the reversed comparison for descending order
    }
};

	std::map<int, std::string, Comparator> m;

// priority_queue
// default max prioriy_queue
 std::priority_queue<int> pq;

// min priorit_queue
std::priority_queue<int, std::vector<int>, std::greater<int>> minPq;

// sort array and vector in descending order 
std::sort(arr, arr + n, std::greater<int>());
std::sort(vec.begin(), vec.end(), std::greater<int>());

======== useful functions ===============
strlen(str) // for character array
str.length() // for string
str.size() // for string
str.substr(7) //gives substr

 size_t position = str.find(sub);
   if (position != std::string::npos) {
        std::cout << "Found '" << sub << "' at position " << position << std::endl;
    }

        sort(paired.begin(), paired.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            return a.first > b.first;
        });

bool compareScores(const pair<int, int>& a, const pair<int, int>& b) {
    return a.first > b.first;
}
sort(paired.begin(), paired.end(), compareScores);

========= functions used ==========
to_string(i + 1)
reverse(s.begin() + i, s.begin() + j + 1)
swap(s[left], s[right])
static_cast<int>(s.size())  // C++ casting operator

================================= Headers for competitive programming ===================
* 		Input/Output:
    * <iostream>: For standard input/output using cin and cout.
* 		Containers:
    * <vector>: Dynamic arrays, useful for most problems.
    * <set> and <map>: Red-black tree-based structures useful for many tasks, such as keeping a sorted set or a frequency count.
    * <unordered_set> and <unordered_map>: Hash-based structures, faster than their ordered counterparts.
    * <stack> and <queue>: For tasks that require depth-first and breadth-first approaches respectively.
    * <deque>: Useful when you need a double-ended queue.
    * <bitset>: Efficient array of bits.
* 		Algorithm:
    * <algorithm>: Provides a wide range of algorithms like sort(), reverse(), next_permutation(), and many more.
* 		Strings:
    * <string>: For string manipulations.
* 		Utility:
    * <utility>: For the pair class.
    * <tuple>: Like pair but can hold more than two values.
    * <numeric>: Algorithms like accumulate for summation.
* 		Math:
    * <cmath>: Provides common mathematical operations.
    * <complex>: Useful for certain mathematical problems and FFT (Fast Fourier Transform).
* 		Data Structure Implementations:
    * <queue>: Contains other types like priority_queue.
* 		Memory and Optimization:
    * <memory>: Includes memset which can be used to quickly initialize arrays.
* 		Tips for Faster I/O:
    * Use ios_base::sync_with_stdio(false); cin.tie(NULL); to speed up cin and cout.
* 		Macros:
* Using #define can help write shorter code and make repetitive tasks quicker. For instance, #define ll long long or looping macros.
Remember, while these tools can speed up coding, understanding the underlying algorithms and data structures, and being able to craft efficient solutions is more critical in competitive programming.



======================================== Useful headers ========================
#include <iostream>
#include <algorithm>
#include <string>

* 		Input/Output:
    * <iostream>: Provides classes and functions for standard input/output operations.
    * <fstream>: File stream classes for reading from and writing to files.
    * <sstream>: String stream classes, useful for parsing.
* 		Containers:
    * <vector>: Dynamic arrays.
    * <list>: Doubly linked list.
    * <deque>: Double-ended queue.
    * <map>, <multimap>: Sorted associative containers.
    * <set>, <multiset>: Sorted container sets.
    * <unordered_map>, <unordered_multimap>, <unordered_set>, <unordered_multiset>: Hash table based containers.
    * <stack>: LIFO data structure.
    * <queue>: FIFO data structure.
    * <array>: Wrapper for fixed-size arrays.
    * <bitset>: Represents a fixed-size sequence of bits.
* 		Algorithms:
    * <algorithm>: Contains a variety of functions for algorithms (e.g., sort(), find()).
* 		Utility:
    * <utility>: Provides pair, make_pair and other utility functions.
    * <tuple>: Tuple data structure.
    * <chrono>: Time utilities.
    * <functional>: Function objects, lambdas, bind.
    * <memory>: Smart pointers like shared_ptr, weak_ptr, and utilities for dynamic memory management.
    * <numeric>: Numerical operations like accumulate, iota.
* 		Strings and Characters:
    * <string>: String class.
    * <cstring>: Functions for manipulating C strings.
    * <cctype>: Functions to check and transform character types.
* 		Error Handling:
    * <exception>: Exception handling utilities.
    * <stdexcept>: Standard exception objects.
* 		C Compatibility:
    * Headers with a c prefix and no .h (e.g., <cstdio>, <cmath>) are C++ versions of C headers (e.g., stdio.h, math.h).
* 		Threading:
    * <thread>: Classes and functions for multi-threading.
    * <mutex>: Mutex classes.
    * <condition_variable>: Condition variable for synchronization.
* 		Others:
    * <iterator>: Iterator base classes.
    * <typeinfo>: Runtime type information.
    * <limits>: Provides information about data types.
    * <random>: Random number generation.
This list is not exhaustive, but it provides an overview of many of the essential headers in C++. Familiarity with these headers can significantly improve a developer's efficiency in C++ programming.



















