/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
ListNode* head;
head->val;
head->next;

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

TreeNode* root;
root->val;
root->left;
root-right;

 ListNode* prev = nullptr;
 if (!head || !head->next) return nullptr;  // head = NULL or head->next = NULL
if (head) // In the context of pointers, a pointer that is not nullptr (i.e., it points to something) is treated as true, and a pointer that is nullptr (i.e., it does not point to anything) is treated as false.

ListNode *slow=head,*fast=head,*prev=nullptr; // correct way if multiple declarations
ListNode* slow=head, fast=head,prev=nullptr; // throws error
