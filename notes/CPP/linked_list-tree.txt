/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

ListNode* head;
head->val;
head->next;

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

TreeNode* root;
root->val;
root->left;
root-right;

 ListNode* prev = nullptr;
 if (!head || !head->next) return nullptr;  // head = NULL or head->next = NULL
if (head) // In the context of pointers, a pointer that is not nullptr (i.e., it points to something) is treated as true, and a pointer that is nullptr (i.e., it does not point to anything) is treated as false.

ListNode *slow=head,*fast=head,*prev=nullptr; // correct way if multiple declarations
ListNode* slow=head, fast=head,prev=nullptr; // throws error

Stack Allocation (Without new):
 ListNode dummy(0); // Dummy node acts as a placeholder to the real head.
 ListNode *tail = &dummy;

Heap Allocation (With new):
ListNode* dummy = new ListNode(0);  // 'dummy' is a pointer to a new ListNode object.
ListNode* tail = dummy;  // 'tail' is set to point to the same ListNode as 'dummy'.

In stack allocation, you don't have to worry about freeing the memory allocated for dummy since it's automatic (not dynamically allocated). It's limited by the scope of the function it's in.

In heap allocation, you are responsible for the memory you've allocated with new, meaning you should eventually free it with delete to avoid a memory leak. This memory is not bound to the function scope and stays allocated until explicitly freed or the program ends

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/